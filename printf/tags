		SRCS/VIM/char.vim	/^inoremap <silent> 	 =UltiSnips#ExpandSnippetOrJump()$/;"	m
		SRCS/VIM/flags.vim	/^inoremap <silent> 	 =UltiSnips#ExpandSnippetOrJump()$/;"	m
		SRCS/VIM/int.vim	/^inoremap <silent> 	 =UltiSnips#ExpandSnippetOrJump()$/;"	m
		SRCS/process.vim	/^inoremap <silent> 	 =UltiSnips#ExpandSnippetOrJump()$/;"	m
	SRCS/VIM/char.vim	/^map  :NERDTreeToggle$/;"	m
	SRCS/VIM/flags.vim	/^map  :NERDTreeToggle$/;"	m
	SRCS/VIM/int.vim	/^map  :NERDTreeToggle$/;"	m
	SRCS/process.vim	/^map  :NERDTreeToggle$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
0	SRCS/VIM/char.vim	/^normal! 0$/;"	m
0	SRCS/VIM/flags.vim	/^normal! 0$/;"	m
0	SRCS/VIM/int.vim	/^normal! 0$/;"	m
0	SRCS/process.vim	/^normal! 0$/;"	m
030|	SRCS/process.vim	/^normal! 030|$/;"	m
05|	SRCS/process.vim	/^normal! 05|$/;"	m
<C-Tab>	SRCS/VIM/char.vim	/^inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()$/;"	m
<C-Tab>	SRCS/VIM/flags.vim	/^inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()$/;"	m
<C-Tab>	SRCS/VIM/int.vim	/^inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()$/;"	m
<C-Tab>	SRCS/process.vim	/^inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()$/;"	m
<F1>	SRCS/VIM/char.vim	/^nmap <F1> :Stdheader$/;"	m
<F1>	SRCS/VIM/flags.vim	/^nmap <F1> :Stdheader$/;"	m
<F1>	SRCS/VIM/int.vim	/^nmap <F1> :Stdheader$/;"	m
<F1>	SRCS/process.vim	/^nmap <F1> :Stdheader$/;"	m
<F2>	SRCS/VIM/char.vim	/^nmap <F2> :Stdheader$/;"	m
<F2>	SRCS/VIM/flags.vim	/^nmap <F2> :Stdheader$/;"	m
<F2>	SRCS/VIM/int.vim	/^nmap <F2> :Stdheader$/;"	m
<F2>	SRCS/process.vim	/^nmap <F2> :Stdheader$/;"	m
<F3>	SRCS/VIM/char.vim	/^noremap <F3> :call FoldToggle()$/;"	m
<F3>	SRCS/VIM/flags.vim	/^noremap <F3> :call FoldToggle()$/;"	m
<F3>	SRCS/VIM/int.vim	/^noremap <F3> :call FoldToggle()$/;"	m
<F3>	SRCS/process.vim	/^noremap <F3> :call FoldToggle()$/;"	m
<Plug>Colorizer	SRCS/VIM/char.vim	/^nnoremap <silent> <Plug>Colorizer :ColorToggle$/;"	m
<Plug>Colorizer	SRCS/VIM/flags.vim	/^nnoremap <silent> <Plug>Colorizer :ColorToggle$/;"	m
<Plug>Colorizer	SRCS/VIM/int.vim	/^nnoremap <silent> <Plug>Colorizer :ColorToggle$/;"	m
<Plug>Colorizer	SRCS/process.vim	/^nnoremap <silent> <Plug>Colorizer :ColorToggle$/;"	m
<Plug>NetrwBrowseX	SRCS/VIM/char.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))$/;"	m
<Plug>NetrwBrowseX	SRCS/VIM/flags.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))$/;"	m
<Plug>NetrwBrowseX	SRCS/VIM/int.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))$/;"	m
<Plug>NetrwBrowseX	SRCS/process.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))$/;"	m
<Plug>NetrwBrowseXVis	SRCS/VIM/char.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<Plug>NetrwBrowseXVis	SRCS/VIM/flags.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<Plug>NetrwBrowseXVis	SRCS/VIM/int.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<Plug>NetrwBrowseXVis	SRCS/process.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
BASICS_TEST_H	panda/test_printf_classic/includes/basics_test.h	/^# define BASICS_TEST_H$/;"	d
BEFORE_SCORE_NAME	panda/test_printf_classic/framework/includes/libunit.h	/^# define BEFORE_SCORE_NAME /;"	d
BEFORE_TEST_NAME	panda/test_printf_classic/framework/includes/libunit.h	/^# define BEFORE_TEST_NAME /;"	d
BLACK	panda/test_printf_classic/framework/includes/libunit.h	/^# define BLACK /;"	d
BLUE	panda/test_printf_classic/framework/includes/libunit.h	/^# define BLUE /;"	d
B_BLUE	panda/test_printf_classic/framework/includes/libunit.h	/^# define B_BLUE /;"	d
B_CYAN	panda/test_printf_classic/framework/includes/libunit.h	/^# define B_CYAN /;"	d
B_GREEN	panda/test_printf_classic/framework/includes/libunit.h	/^# define B_GREEN /;"	d
B_PINK	panda/test_printf_classic/framework/includes/libunit.h	/^# define B_PINK /;"	d
B_RED	panda/test_printf_classic/framework/includes/libunit.h	/^# define B_RED /;"	d
B_YELLOW	panda/test_printf_classic/framework/includes/libunit.h	/^# define B_YELLOW /;"	d
CC	../libft/Makefile	/^CC		= gcc$/;"	m
CC	Makefile	/^CC			= gcc$/;"	m
CC	libft/Makefile	/^CC		= gcc$/;"	m
CC	panda/test_printf_classic/Makefile	/^CC = gcc -Wall -Wextra -Werror$/;"	m
CC	panda/test_printf_classic/framework/Makefile	/^CC = gcc $(FLAG)$/;"	m
CFLAGS	../libft/Makefile	/^CFLAGS	= -Wall -Wextra -Werror$/;"	m
CFLAGS	Makefile	/^CFLAGS		= -I includes -Wall -Wextra -Werror$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS	= -Wall -Wextra -Werror$/;"	m
CONV_BIGC_TEST_H	panda/test_printf_classic/includes/conv_bigc_test.h	/^# define CONV_BIGC_TEST_H$/;"	d
CONV_BIGS_TEST_H	panda/test_printf_classic/includes/conv_bigs_test.h	/^# define CONV_BIGS_TEST_H$/;"	d
CONV_B_TEST_H	panda/test_printf_classic/includes/conv_b_test.h	/^# define CONV_B_TEST_H$/;"	d
CONV_C_TEST_H	panda/test_printf_classic/includes/conv_c_test.h	/^# define CONV_C_TEST_H$/;"	d
CONV_D_I_BIGD_TEST_H	panda/test_printf_classic/includes/conv_d_i_bigd_test.h	/^# define CONV_D_I_BIGD_TEST_H$/;"	d
CONV_O_BIGO_TEST_H	panda/test_printf_classic/includes/conv_o_bigo_test.h	/^# define CONV_O_BIGO_TEST_H$/;"	d
CONV_P_TEST_H	panda/test_printf_classic/includes/conv_p_test.h	/^# define CONV_P_TEST_H$/;"	d
CONV_S_TEST_H	panda/test_printf_classic/includes/conv_s_test.h	/^# define CONV_S_TEST_H$/;"	d
CONV_U_BIGU_TEST_H	panda/test_printf_classic/includes/conv_u_bigu_test.h	/^# define CONV_U_BIGU_TEST_H$/;"	d
CONV_X_BIGX_TEST_H	panda/test_printf_classic/includes/conv_x_bigx_test.h	/^# define CONV_X_BIGX_TEST_H$/;"	d
CYAN	panda/test_printf_classic/framework/includes/libunit.h	/^# define CYAN /;"	d
DEBUG_FILE_NAME	panda/test_printf_classic/framework/includes/libunit.h	/^# define DEBUG_FILE_NAME /;"	d
DEF	panda/test_printf_classic/framework/includes/libunit.h	/^# define DEF /;"	d
DEF_NAME	panda/test_printf_classic/framework/includes/libunit.h	/^# define DEF_NAME /;"	d
DEP	../libft/Makefile	/^DEP		:= $(SRC:%.c=$(DEP_DIR)\/%.d)$/;"	m
DEP	libft/Makefile	/^DEP		:= $(SRC:%.c=$(DEP_DIR)\/%.d)$/;"	m
DEPB	../libft/Makefile	/^DEPB	:= $(SRCB:%.c=$(DEP_DIR)\/%.d)$/;"	m
DEPB	libft/Makefile	/^DEPB	:= $(SRCB:%.c=$(DEP_DIR)\/%.d)$/;"	m
DEP_DIR	../libft/Makefile	/^DEP_DIR	= dep$/;"	m
DEP_DIR	libft/Makefile	/^DEP_DIR	= dep$/;"	m
DFLAGS	../libft/Makefile	/^DFLAGS	= -MP -MMD -MF $(DEP_DIR)\/$*.d -MT '$@'$/;"	m
DFLAGS	libft/Makefile	/^DFLAGS	= -MP -MMD -MF $(DEP_DIR)\/$*.d -MT '$@'$/;"	m
DIR	../libft/Makefile	/^DIR		= $(DEP_DIR) $(OBJ_DIR)$/;"	m
DIR	libft/Makefile	/^DIR		= $(DEP_DIR) $(OBJ_DIR)$/;"	m
DIR_OBJ	panda/test_printf_classic/framework/Makefile	/^DIR_OBJ = objs$/;"	m
DIR_SRC	panda/test_printf_classic/framework/Makefile	/^DIR_SRC = srcs$/;"	m
FLAG	panda/test_printf_classic/framework/Makefile	/^FLAG = -Wall -Wextra -Werror$/;"	m
FT_PRINTF_H	SRCS/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GREEN	panda/test_printf_classic/framework/includes/libunit.h	/^# define GREEN /;"	d
INCL_FLAG	panda/test_printf_classic/Makefile	/^INCL_FLAG = -I includes  -I $(UNIT_DIR)\/includes$/;"	m
INCL_FLAG	panda/test_printf_classic/framework/Makefile	/^INCL_FLAG = -Iincludes$/;"	m
LIBFT	Makefile	/^LIBFT		= libft$/;"	m
LIBFT_H	../libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBUNIT_H	panda/test_printf_classic/framework/includes/libunit.h	/^# define LIBUNIT_H$/;"	d
LIB_FLAG	panda/test_printf_classic/Makefile	/^LIB_FLAG = -L. -lftprintf -L$(UNIT_DIR) -lunit$/;"	m
MAX_NAME_LEN	panda/test_printf_classic/framework/includes/libunit.h	/^# define MAX_NAME_LEN /;"	d
MINUS	SRCS/ft_printf.h	/^#define MINUS /;"	d
MIXED_TEST_H	panda/test_printf_classic/includes/mixed_test.h	/^# define MIXED_TEST_H$/;"	d
NAME	../libft/Makefile	/^NAME	= libft.a$/;"	m
NAME	Makefile	/^NAME		= libftprintf.a$/;"	m
NAME	libft/Makefile	/^NAME	= libft.a$/;"	m
NAME	panda/test_printf_classic/Makefile	/^NAME = ft_printf_tests$/;"	m
NAME	panda/test_printf_classic/framework/Makefile	/^NAME = libunit.a$/;"	m
NAME_LIBFT	Makefile	/^NAME_LIBFT	= libft.a$/;"	m
NB_TEST_TYPE	panda/test_printf_classic/includes/test.h	/^# define NB_TEST_TYPE /;"	d
NUL	SRCS/ft_printf.h	/^#define NUL /;"	d
OBJ	../libft/Makefile	/^OBJ 	:= $(SRC:%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ	libft/Makefile	/^OBJ 	:= $(SRC:%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ	panda/test_printf_classic/Makefile	/^OBJ = $(SRC:%.c=%.o)$/;"	m
OBJ	panda/test_printf_classic/framework/Makefile	/^OBJ = $(SRC:$(DIR_SRC)\/%.c=$(DIR_OBJ)\/%.o)$/;"	m
OBJB	../libft/Makefile	/^OBJB 	:= $(SRCB:%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJB	libft/Makefile	/^OBJB 	:= $(SRCB:%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJS	Makefile	/^OBJS		= ${SRCS:.c=.o}$/;"	m
OBJ_DIR	../libft/Makefile	/^OBJ_DIR	= obj$/;"	m
OBJ_DIR	libft/Makefile	/^OBJ_DIR	= obj$/;"	m
PERCENT_TEST_H	panda/test_printf_classic/includes/percent_test.h	/^# define PERCENT_TEST_H$/;"	d
PINK	panda/test_printf_classic/framework/includes/libunit.h	/^# define PINK /;"	d
POINT	SRCS/ft_printf.h	/^#define POINT /;"	d
PROJ	panda/test_printf_classic/Makefile	/^PROJ = libftprintf.a$/;"	m
READ_SIZE	panda/test_printf_classic/framework/includes/libunit.h	/^# define READ_SIZE /;"	d
RED	panda/test_printf_classic/framework/includes/libunit.h	/^# define RED /;"	d
RM	Makefile	/^RM			= rm -f$/;"	m
SEC_FACT	panda/test_printf_classic/framework/includes/libunit.h	/^# define SEC_FACT /;"	d
SRC	../libft/Makefile	/^SRC		= ft_strlen.c ft_strlcpy.c ft_strchr.c ft_strrchr.c ft_strncmp.c ft_strlcat.c \\$/;"	m
SRC	libft/Makefile	/^SRC		= ft_strlen.c ft_strlcpy.c ft_strchr.c ft_strrchr.c ft_strncmp.c ft_strlcat.c \\$/;"	m
SRC	panda/test_printf_classic/Makefile	/^SRC = $(addprefix main\/, \\$/;"	m
SRC	panda/test_printf_classic/framework/Makefile	/^SRC = $(addprefix $(DIR_SRC)\/, \\$/;"	m
SRCB	../libft/Makefile	/^SRCB	= ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c ft_lstadd_back.c \\$/;"	m
SRCB	libft/Makefile	/^SRCB	= ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c ft_lstadd_back.c \\$/;"	m
SRCS	Makefile	/^SRCS		= srcs\/ft_printf.c srcs\/ft_flags.c srcs\/ft_fct.c \\$/;"	m
SessionLoad	SRCS/VIM/char.vim	/^let SessionLoad = 1$/;"	v
SessionLoad	SRCS/VIM/flags.vim	/^let SessionLoad = 1$/;"	v
SessionLoad	SRCS/VIM/int.vim	/^let SessionLoad = 1$/;"	v
SessionLoad	SRCS/process.vim	/^let SessionLoad = 1$/;"	v
TEST_H	panda/test_printf_classic/includes/test.h	/^# define TEST_H$/;"	d
TIMEOUT_SEC	panda/test_printf_classic/framework/includes/libunit.h	/^# define TIMEOUT_SEC /;"	d
UNIT	panda/test_printf_classic/Makefile	/^UNIT = $(UNIT_DIR)\/libunit.a$/;"	m
UNIT_DIR	panda/test_printf_classic/Makefile	/^UNIT_DIR = framework$/;"	m
WHITE	panda/test_printf_classic/framework/includes/libunit.h	/^# define WHITE /;"	d
YELLOW	panda/test_printf_classic/framework/includes/libunit.h	/^# define YELLOW /;"	d
ZERO	SRCS/ft_printf.h	/^#define ZERO /;"	d
\tc	SRCS/VIM/char.vim	/^nmap \\tc <Plug>Colorizer$/;"	m
\tc	SRCS/VIM/flags.vim	/^nmap \\tc <Plug>Colorizer$/;"	m
\tc	SRCS/VIM/int.vim	/^nmap \\tc <Plug>Colorizer$/;"	m
\tc	SRCS/process.vim	/^nmap \\tc <Plug>Colorizer$/;"	m
arg	SRCS/ft_printf.h	/^	char	arg;$/;"	m	struct:s_flags
basics_launcher	panda/test_printf_classic/basics/a00_launcher.c	/^int		basics_launcher(int *success, int *total)$/;"	f
basics_test_01	panda/test_printf_classic/basics/a01_test_01.c	/^int		basics_test_01(void)$/;"	f
basics_test_02	panda/test_printf_classic/basics/a02_test_02.c	/^int		basics_test_02(void)$/;"	f
c_all_01	panda/test_printf_classic/conv_c/a08_all_01.c	/^int		c_all_01(void)$/;"	f
c_basic_01	panda/test_printf_classic/conv_c/a01_basic_01.c	/^int		c_basic_01(void)$/;"	f
c_basic_02	panda/test_printf_classic/conv_c/a02_basic_02.c	/^int		c_basic_02(void)$/;"	f
c_basic_03	panda/test_printf_classic/conv_c/a03_basic_03.c	/^int		c_basic_03(void)$/;"	f
c_basic_04	panda/test_printf_classic/conv_c/a04_basic_04.c	/^int		c_basic_04(void)$/;"	f
c_padding_01	panda/test_printf_classic/conv_c/a05_padding_01.c	/^int		c_padding_01(void)$/;"	f
c_padding_02	panda/test_printf_classic/conv_c/a06_padding_02.c	/^int		c_padding_02(void)$/;"	f
c_padding_03	panda/test_printf_classic/conv_c/a07_padding_03.c	/^int		c_padding_03(void)$/;"	f
color	main_formats_Xx.c	/^void color(int ret, int ret2)$/;"	f
color	printforever.c	/^void color(int ret, int ret2)$/;"	f
content	../libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
conv_c_launcher	panda/test_printf_classic/conv_c/a00_launcher.c	/^int		conv_c_launcher(int *success, int *total)$/;"	f
conv_d_i_launcher	panda/test_printf_classic/conv_d_i/a00_launcher.c	/^int		conv_d_i_launcher(int *success, int *total)$/;"	f
conv_p_launcher	panda/test_printf_classic/conv_p/a00_launcher.c	/^int		conv_p_launcher(int *success, int *total)$/;"	f
conv_s_launcher	panda/test_printf_classic/conv_s/a00_launcher.c	/^int		conv_s_launcher(int *success, int *total)$/;"	f
conv_u_launcher	panda/test_printf_classic/conv_u/a00_launcher.c	/^int		conv_u_launcher(int *success, int *total)$/;"	f
conv_x_bigx_launcher	panda/test_printf_classic/conv_x_bigx/a00_launcher.c	/^int		conv_x_bigx_launcher(int *success, int *total)$/;"	f
d_all_01	panda/test_printf_classic/conv_d_i/a33_all_01.c	/^int		d_all_01(void)$/;"	f
d_all_02	panda/test_printf_classic/conv_d_i/a34_all_02.c	/^int		d_all_02(void)$/;"	f
d_all_03	panda/test_printf_classic/conv_d_i/a35_all_03.c	/^int		d_all_03(void)$/;"	f
d_all_04	panda/test_printf_classic/conv_d_i/a36_all_04.c	/^int		d_all_04(void)$/;"	f
d_all_05	panda/test_printf_classic/conv_d_i/a37_all_05.c	/^int		d_all_05(void)$/;"	f
d_all_06	panda/test_printf_classic/conv_d_i/a40_all_06.c	/^int		d_all_06(void)$/;"	f
d_basic_01	panda/test_printf_classic/conv_d_i/a01_basic_01.c	/^int		d_basic_01(void)$/;"	f
d_basic_02	panda/test_printf_classic/conv_d_i/a02_basic_02.c	/^int		d_basic_02(void)$/;"	f
d_basic_03	panda/test_printf_classic/conv_d_i/a03_basic_03.c	/^int		d_basic_03(void)$/;"	f
d_basic_04	panda/test_printf_classic/conv_d_i/a04_basic_04.c	/^int		d_basic_04(void)$/;"	f
d_basic_05	panda/test_printf_classic/conv_d_i/a05_basic_05.c	/^int		d_basic_05(void)$/;"	f
d_basic_08	panda/test_printf_classic/conv_d_i/a20_basic_08.c	/^int		d_basic_08(void)$/;"	f
d_padding_01	panda/test_printf_classic/conv_d_i/a26_padding_01.c	/^int		d_padding_01(void)$/;"	f
d_padding_02	panda/test_printf_classic/conv_d_i/a27_padding_02.c	/^int		d_padding_02(void)$/;"	f
d_padding_03	panda/test_printf_classic/conv_d_i/a28_padding_03.c	/^int		d_padding_03(void)$/;"	f
d_padding_04	panda/test_printf_classic/conv_d_i/a29_padding_04.c	/^int		d_padding_04(void)$/;"	f
d_padding_05	panda/test_printf_classic/conv_d_i/a30_padding_05.c	/^int		d_padding_05(void)$/;"	f
d_padding_06	panda/test_printf_classic/conv_d_i/a31_padding_06.c	/^int		d_padding_06(void)$/;"	f
d_padding_07	panda/test_printf_classic/conv_d_i/a32_padding_07.c	/^int		d_padding_07(void)$/;"	f
d_precision_01	panda/test_printf_classic/conv_d_i/a21_precision_01.c	/^int		d_precision_01(void)$/;"	f
d_precision_02	panda/test_printf_classic/conv_d_i/a22_precision_02.c	/^int		d_precision_02(void)$/;"	f
d_precision_03	panda/test_printf_classic/conv_d_i/a23_precision_03.c	/^int		d_precision_03(void)$/;"	f
d_precision_04	panda/test_printf_classic/conv_d_i/a24_precision_04.c	/^int		d_precision_04(void)$/;"	f
d_precision_05	panda/test_printf_classic/conv_d_i/a25_precision_05.c	/^int		d_precision_05(void)$/;"	f
d_precision_06	panda/test_printf_classic/conv_d_i/a38_precision_06.c	/^int		d_precision_06(void)$/;"	f
d_precision_07	panda/test_printf_classic/conv_d_i/a39_precision_07.c	/^int		d_precision_07(void)$/;"	f
f_l	../libft/ft_split.c	/^static int		f_l(char *s, char c, int i)$/;"	f	file:
f_l	libft/ft_split.c	/^static int		f_l(char *s, char c, int i)$/;"	f	file:
fct	panda/test_printf_classic/framework/includes/libunit.h	/^	int				(*fct)(void);$/;"	m	struct:s_test
ft_atoi	../libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_atoi_pos	libft/ft_atoi_pos.c	/^int		ft_atoi_pos(const char *str)$/;"	f
ft_bzero	../libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	../libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_cleanstruct	SRCS/ft_printf.c	/^int		ft_cleanstruct(t_flags *flags)$/;"	f
ft_connect_stdout	panda/test_printf_classic/framework/srcs/stdout_tool.c	/^void	ft_connect_stdout(int *pfd, int *save)$/;"	f
ft_count_c	../libft/ft_itoa.c	/^static int			ft_count_c(long int n, int i)$/;"	f	file:
ft_count_c	libft/ft_itoa.c	/^static int			ft_count_c(long int n, int i)$/;"	f	file:
ft_count_char_int	SRCS/ft_flags.c	/^int			ft_count_char_int(long int nb, int base)$/;"	f
ft_del_scorelst	panda/test_printf_classic/framework/srcs/del_lst.c	/^void	ft_del_scorelst(t_score **score)$/;"	f
ft_del_testlst	panda/test_printf_classic/framework/srcs/del_lst.c	/^void	ft_del_testlst(t_test **test)$/;"	f
ft_display_before	SRCS/ft_fct.c	/^int				ft_display_before(t_flags *flags, long int nb)$/;"	f
ft_find	../libft/ft_split.c	/^static int		ft_find(char letter, char c)$/;"	f	file:
ft_find	../libft/ft_strtrim.c	/^static int		ft_find(char c, char const *set)$/;"	f	file:
ft_find	libft/ft_split.c	/^static int		ft_find(char letter, char c)$/;"	f	file:
ft_find	libft/ft_strtrim.c	/^static int		ft_find(char c, char const *set)$/;"	f	file:
ft_fork_and_exec	panda/test_printf_classic/framework/srcs/launch_tests.c	/^static void	ft_fork_and_exec(t_test *tmp)$/;"	f	file:
ft_free	../libft/ft_split.c	/^static char		**ft_free(char **tab_words, int i)$/;"	f	file:
ft_free	libft/ft_split.c	/^static char		**ft_free(char **tab_words, int i)$/;"	f	file:
ft_get_fct	SRCS/ft_printf.c	/^int		ft_get_fct(char **str, va_list ap, t_flags *flags)$/;"	f
ft_get_final_score	panda/test_printf_classic/framework/srcs/display.c	/^int				ft_get_final_score(t_score **score)$/;"	f
ft_get_flags	SRCS/ft_printf.c	/^int		ft_get_flags(char **str, t_flags *flags, va_list ap)$/;"	f
ft_get_stdout	panda/test_printf_classic/framework/srcs/stdout_tool.c	/^char	*ft_get_stdout(int *pfd, int *save)$/;"	f
ft_init_ftab	panda/test_printf_classic/main/main.c	/^static void	ft_init_ftab(int (**f)(int *, int *))$/;"	f	file:
ft_init_mask	SRCS/ft_flags.c	/^void			ft_init_mask(t_flags *flags, long int nb, int base)$/;"	f
ft_init_test_name	panda/test_printf_classic/main/main.c	/^static void	ft_init_test_name(char **tab)$/;"	f	file:
ft_isalnum	../libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	../libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	../libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	../libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isfind	../libft/ft_isfind.c	/^int			ft_isfind(char *str, char stop)$/;"	f
ft_isfind	libft/ft_isfind.c	/^int			ft_isfind(char *str, char stop)$/;"	f
ft_isprint	../libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_itoa	../libft/ft_itoa.c	/^char				*ft_itoa(int n)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char				*ft_itoa(int n)$/;"	f
ft_launch_tests	panda/test_printf_classic/framework/srcs/launch_tests.c	/^int			ft_launch_tests(t_test **test, int *success, int *total)$/;"	f
ft_load_test	panda/test_printf_classic/framework/srcs/load_test.c	/^void			ft_load_test(t_test **test, char *name, int (*f)(void))$/;"	f
ft_lstadd_back	../libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *new)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *new)$/;"	f
ft_lstadd_front	../libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *new)$/;"	f
ft_lstdelone	../libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	../libft/ft_lstiter.c	/^void		ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void		ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	../libft/ft_lstlast.c	/^t_list		*ft_lstlast(t_list *lst)$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list		*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	../libft/ft_lstmap.c	/^t_list		*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list		*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	../libft/ft_lstnew.c	/^t_list		*ft_lstnew(void *content)$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list		*ft_lstnew(void *content)$/;"	f
ft_lstsize	../libft/ft_lstsize.c	/^int		ft_lstsize(t_list *lst)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int		ft_lstsize(t_list *lst)$/;"	f
ft_memalloc	panda/test_printf_classic/framework/srcs/load_test.c	/^static void		*ft_memalloc(size_t size)$/;"	f	file:
ft_memalloc	panda/test_printf_classic/framework/srcs/save_score.c	/^static void		*ft_memalloc(size_t size)$/;"	f	file:
ft_memccpy	../libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	../libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	../libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	../libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	../libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	../libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_newscore	panda/test_printf_classic/framework/srcs/save_score.c	/^static t_score	*ft_newscore(char *name, int success, int total)$/;"	f	file:
ft_precis	SRCS/ft_flags.c	/^int			ft_precis(va_list ap, t_flags *flags, char **str)$/;"	f
ft_printf	SRCS/ft_printf.c	/^int		ft_printf(const char *format, ...)$/;"	f
ft_printstr	SRCS/ft_printf.c	/^int		ft_printstr(char **str)$/;"	f
ft_process	../libft/ft_itoa.c	/^static char			ft_process(char *s, long int nbr)$/;"	f	file:
ft_process	libft/ft_itoa.c	/^static char			ft_process(char *s, long int nbr)$/;"	f	file:
ft_put_end_word	panda/test_printf_classic/framework/srcs/display.c	/^void			ft_put_end_word(void)$/;"	f
ft_put_one_score	panda/test_printf_classic/framework/srcs/display.c	/^static void		ft_put_one_score(char *name, int success, int total, char *col)$/;"	f	file:
ft_put_ptr	SRCS/ft_p.c	/^int				ft_put_ptr(va_list ap, t_flags *flags)$/;"	f
ft_put_ptr2	SRCS/ft_p.c	/^static int		ft_put_ptr2(unsigned long nb, t_flags *flags)$/;"	f	file:
ft_put_score	panda/test_printf_classic/framework/srcs/display.c	/^static void		ft_put_score(t_score *score)$/;"	f	file:
ft_putchar	../libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar	libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar	panda/test_printf_classic/framework/srcs/display.c	/^static void	ft_putchar(char c)$/;"	f	file:
ft_putchar_fd	../libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putchar_int	../libft/ft_putchar_int.c	/^int	ft_putchar_int(char c)$/;"	f
ft_putchar_int	libft/ft_putchar_int.c	/^int	ft_putchar_int(char c)$/;"	f
ft_putchar_mod	SRCS/ft_fct.c	/^int				ft_putchar_mod(va_list ap, t_flags *flags)$/;"	f
ft_putchar_mod2	SRCS/ft_fct.c	/^static int		ft_putchar_mod2(void)$/;"	f	file:
ft_putchar_ptf	SRCS/ft_cs.c	/^int				ft_putchar_ptf(va_list ap, t_flags *flags)$/;"	f
ft_putchar_ptf2	SRCS/ft_cs.c	/^static int		ft_putchar_ptf2(char c)$/;"	f	file:
ft_putendl	../libft/ft_putendl.c	/^void	ft_putendl(char *s)$/;"	f
ft_putendl	libft/ft_putendl.c	/^void	ft_putendl(char *s)$/;"	f
ft_putendl	panda/test_printf_classic/main/tool.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_col	panda/test_printf_classic/main/tool.c	/^void	ft_putendl_col(char *str, char *color, char *colreset)$/;"	f
ft_putendl_fd	../libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_puthexa_max	SRCS/ft_x.c	/^int				ft_puthexa_max(va_list ap, t_flags *flags)$/;"	f
ft_puthexa_maxb	SRCS/ft_x.c	/^static int		ft_puthexa_maxb(unsigned int nb, t_flags *flags)$/;"	f	file:
ft_puthexa_min	SRCS/ft_x.c	/^int				ft_puthexa_min(va_list ap, t_flags *flags)$/;"	f
ft_puthexa_minb	SRCS/ft_x.c	/^static int		ft_puthexa_minb(unsigned int nb, t_flags *flags)$/;"	f	file:
ft_putname	panda/test_printf_classic/framework/srcs/display.c	/^static void	ft_putname(t_test *test)$/;"	f	file:
ft_putnbr	../libft/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr	panda/test_printf_classic/framework/srcs/display.c	/^static void	ft_putnbr(int n)$/;"	f	file:
ft_putnbr_col	panda/test_printf_classic/framework/srcs/display.c	/^static void	ft_putnbr_col(int n, char *color, char *colreset)$/;"	f	file:
ft_putnbr_fd	../libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_int	SRCS/ft_diu.c	/^int				ft_putnbr_int(va_list ap, t_flags *flags)$/;"	f
ft_putnbr_intb	SRCS/ft_diu.c	/^static int		ft_putnbr_intb(int nb, t_flags *flags)$/;"	f	file:
ft_putnbr_uint	SRCS/ft_diu.c	/^int		ft_putnbr_uint(va_list ap, t_flags *flags)$/;"	f
ft_putnbr_uintb	SRCS/ft_diu.c	/^static int		ft_putnbr_uintb(unsigned int nb, t_flags *flags)$/;"	f	file:
ft_putnbrtests	panda/test_printf_classic/framework/srcs/display.c	/^void		ft_putnbrtests(int cnt_success, int cnt_total)$/;"	f
ft_putrslt	panda/test_printf_classic/framework/srcs/display.c	/^void		ft_putrslt(t_test *test)$/;"	f
ft_putstr	../libft/ft_putstr.c	/^void	ft_putstr(char *str)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char *str)$/;"	f
ft_putstr	panda/test_printf_classic/framework/srcs/display.c	/^static void	ft_putstr(char const *s)$/;"	f	file:
ft_putstr	panda/test_printf_classic/main/tool.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_col	panda/test_printf_classic/framework/srcs/display.c	/^static void	ft_putstr_col(char *str, char *color, char *colreset)$/;"	f	file:
ft_putstr_col	panda/test_printf_classic/main/tool.c	/^void	ft_putstr_col(char *str, char *color, char *colreset)$/;"	f
ft_putstr_fd	../libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *str, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *str, int fd)$/;"	f
ft_putstr_int	SRCS/ft_cs.c	/^int				ft_putstr_int(va_list ap, t_flags *flags)$/;"	f
ft_putstr_int2	SRCS/ft_cs.c	/^static int		ft_putstr_int2(char *str, t_flags *flags)$/;"	f	file:
ft_putzero	SRCS/ft_fct.c	/^int				ft_putzero()$/;"	f
ft_ret_analysis	panda/test_printf_classic/framework/srcs/launch_tests.c	/^static void	ft_ret_analysis(t_test *test, int status)$/;"	f	file:
ft_reverse	../libft/ft_itoa.c	/^static char			ft_reverse(char *s)$/;"	f	file:
ft_reverse	libft/ft_itoa.c	/^static char			ft_reverse(char *s)$/;"	f	file:
ft_run_tests	panda/test_printf_classic/main/main.c	/^static void	ft_run_tests(t_score **score, int (**f)(int *, int *), char **name)$/;"	f	file:
ft_save_score	panda/test_printf_classic/framework/srcs/save_score.c	/^void			ft_save_score(t_score **score, char *name, int success,$/;"	f
ft_scoreadd_back	panda/test_printf_classic/framework/srcs/save_score.c	/^static void		ft_scoreadd_back(t_score **alst, t_score *new)$/;"	f	file:
ft_split	../libft/ft_split.c	/^char			**ft_split(char const *s, char c)$/;"	f
ft_split	libft/ft_split.c	/^char			**ft_split(char const *s, char c)$/;"	f
ft_strchr	../libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	panda/test_printf_classic/main/tool.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strdel	panda/test_printf_classic/main/tool.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	../libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strjoin	../libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin	panda/test_printf_classic/framework/srcs/stdout_tool.c	/^static char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	file:
ft_strlcat	../libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	../libft/ft_strlcpy.c	/^size_t		ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t		ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	../libft/ft_strlen.c	/^int		ft_strlen(const char *s)$/;"	f
ft_strlen	libft/ft_strlen.c	/^int		ft_strlen(const char *s)$/;"	f
ft_strmapi	../libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	../libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnew	panda/test_printf_classic/framework/srcs/stdout_tool.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	../libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	../libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	../libft/ft_strtrim.c	/^char			*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char			*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	../libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_testadd_back	panda/test_printf_classic/framework/srcs/load_test.c	/^static void		ft_testadd_back(t_test **alst, t_test *new)$/;"	f	file:
ft_testnew	panda/test_printf_classic/framework/srcs/load_test.c	/^static t_test	*ft_testnew(char *name, int (*f)(void))$/;"	f	file:
ft_tolower	../libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	../libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_width	SRCS/ft_flags.c	/^void		ft_width(va_list ap, t_flags *flags, char **str, int i)$/;"	f
ft_words	../libft/ft_split.c	/^static int		ft_words(char *s, char c)$/;"	f	file:
ft_words	libft/ft_split.c	/^static int		ft_words(char *s, char c)$/;"	f	file:
ft_write_in_debug_file	panda/test_printf_classic/framework/srcs/debug_file.c	/^void	ft_write_in_debug_file(t_test test)$/;"	f
ft_write_rslt	panda/test_printf_classic/framework/srcs/debug_file.c	/^void	ft_write_rslt(t_data data, int ret)$/;"	f
ft_write_test_name	panda/test_printf_classic/framework/srcs/debug_file.c	/^void	ft_write_test_name(char *str_test)$/;"	f
ft_write_title	panda/test_printf_classic/framework/srcs/debug_file.c	/^void	ft_write_title(void)$/;"	f
green	main_formats_Xx.c	/^void green()$/;"	f
green	printforever.c	/^void green()$/;"	f
gx	SRCS/VIM/char.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	SRCS/VIM/char.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
gx	SRCS/VIM/flags.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	SRCS/VIM/flags.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
gx	SRCS/VIM/int.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	SRCS/VIM/int.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
gx	SRCS/process.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	SRCS/process.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
main	maim.c	/^int		main()$/;"	f
main	main.c	/^int main() $/;"	f
main	main_format_P.c	/^int main()$/;"	f
main	main_format_U.c	/^int main()$/;"	f
main	main_formats_CS.c	/^int main()$/;"	f
main	main_formats_D&I.c	/^int main()$/;"	f
main	main_formats_Xx.c	/^int main()$/;"	f
main	panda/test_gnl/main.c	/^int		main(int ac, char **av)$/;"	f
main	panda/test_gnl/main_bonus.c	/^int		main(int ac, char **av)$/;"	f
main	panda/test_gnl/test.c	/^	main(void)$/;"	f
main	panda/test_gnl/test_bonus.c	/^	main(void)$/;"	f
main	panda/test_printf_classic/main/main.c	/^int			main(void)$/;"	f
main	printforever.c	/^int main()$/;"	f
mix_test_01	panda/test_printf_classic/mixed/a01_test_01.c	/^int		mix_test_01(void)$/;"	f
mix_test_02	panda/test_printf_classic/mixed/a02_test_02.c	/^int		mix_test_02(void)$/;"	f
mix_test_03	panda/test_printf_classic/mixed/a03_test_03.c	/^int		mix_test_03(void)$/;"	f
mix_test_04	panda/test_printf_classic/mixed/a04_test_04.c	/^int		mix_test_04(void)$/;"	f
mix_test_05	panda/test_printf_classic/mixed/a05_test_05.c	/^int		mix_test_05(void)$/;"	f
mixed_launcher	panda/test_printf_classic/mixed/a00_launcher.c	/^int		mixed_launcher(int *success, int *total)$/;"	f
name	panda/test_printf_classic/framework/includes/libunit.h	/^	char			name[MAX_NAME_LEN + 1];$/;"	m	struct:s_score
name	panda/test_printf_classic/framework/includes/libunit.h	/^	char			name[MAX_NAME_LEN + 1];$/;"	m	struct:s_test
next	../libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	panda/test_printf_classic/framework/includes/libunit.h	/^	struct s_score	*next;$/;"	m	struct:s_score	typeref:struct:s_score::s_score
next	panda/test_printf_classic/framework/includes/libunit.h	/^	struct s_test	*next;$/;"	m	struct:s_test	typeref:struct:s_test::s_test
p_all_01	panda/test_printf_classic/conv_p/a07_all_01.c	/^int		p_all_01(void)$/;"	f
p_basic_01	panda/test_printf_classic/conv_p/a01_basic_01.c	/^int		p_basic_01(void)$/;"	f
p_basic_02	panda/test_printf_classic/conv_p/a02_basic_02.c	/^int		p_basic_02(void)$/;"	f
p_basic_03	panda/test_printf_classic/conv_p/a03_basic_03.c	/^int		p_basic_03(void)$/;"	f
p_padding_01	panda/test_printf_classic/conv_p/a04_padding_01.c	/^int		p_padding_01(void)$/;"	f
p_padding_02	panda/test_printf_classic/conv_p/a05_padding_02.c	/^int		p_padding_02(void)$/;"	f
p_padding_03	panda/test_printf_classic/conv_p/a06_padding_03.c	/^int		p_padding_03(void)$/;"	f
percent_all_01	panda/test_printf_classic/percent/a12_all_01.c	/^int		percent_all_01(void)$/;"	f
percent_basic_01	panda/test_printf_classic/percent/a01_basic_01.c	/^int		percent_basic_01(void)$/;"	f
percent_launcher	panda/test_printf_classic/percent/a00_launcher.c	/^int		percent_launcher(int *success, int *total)$/;"	f
percent_padding_01	panda/test_printf_classic/percent/a09_padding_01.c	/^int		percent_padding_01(void)$/;"	f
percent_padding_02	panda/test_printf_classic/percent/a10_padding_02.c	/^int		percent_padding_02(void)$/;"	f
percent_padding_03	panda/test_printf_classic/percent/a11_padding_03.c	/^int		percent_padding_03(void)$/;"	f
percent_precision_01	panda/test_printf_classic/percent/a05_precision_01.c	/^int		percent_precision_01(void)$/;"	f
percent_precision_02	panda/test_printf_classic/percent/a06_precision_02.c	/^int		percent_precision_02(void)$/;"	f
percent_precision_03	panda/test_printf_classic/percent/a07_precision_03.c	/^int		percent_precision_03(void)$/;"	f
percent_precision_04	panda/test_printf_classic/percent/a08_precision_04.c	/^int		percent_precision_04(void)$/;"	f
precis	SRCS/ft_printf.h	/^	int		precis;$/;"	m	struct:s_flags
r1	panda/test_printf_classic/framework/includes/libunit.h	/^	int		r1;$/;"	m	struct:s_data
r2	panda/test_printf_classic/framework/includes/libunit.h	/^	int		r2;$/;"	m	struct:s_data
red	main_formats_Xx.c	/^void red()$/;"	f
red	printforever.c	/^void red()$/;"	f
reset	main_formats_Xx.c	/^void reset()$/;"	f
reset	printforever.c	/^void reset()$/;"	f
rslt	SRCS/ft_printf.h	/^	int		rslt;$/;"	m	struct:s_flags
s1	panda/test_printf_classic/framework/includes/libunit.h	/^	char	*s1;$/;"	m	struct:s_data
s2	panda/test_printf_classic/framework/includes/libunit.h	/^	char	*s2;$/;"	m	struct:s_data
s:cpo_save	SRCS/VIM/char.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	SRCS/VIM/flags.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	SRCS/VIM/int.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	SRCS/process.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	SRCS/VIM/char.vim	/^let s:l = 1 - ((0 * winheight(0) + 41) \/ 82)$/;"	v
s:l	SRCS/VIM/char.vim	/^let s:l = 36 - ((35 * winheight(0) + 41) \/ 82)$/;"	v
s:l	SRCS/VIM/flags.vim	/^let s:l = 1 - ((0 * winheight(0) + 41) \/ 82)$/;"	v
s:l	SRCS/VIM/flags.vim	/^let s:l = 2 - ((1 * winheight(0) + 41) \/ 82)$/;"	v
s:l	SRCS/VIM/int.vim	/^let s:l = 1 - ((0 * winheight(0) + 41) \/ 82)$/;"	v
s:l	SRCS/process.vim	/^let s:l = 140 - ((43 * winheight(0) + 40) \/ 81)$/;"	v
s:l	SRCS/process.vim	/^let s:l = 21 - ((20 * winheight(0) + 40) \/ 81)$/;"	v
s:l	SRCS/process.vim	/^let s:l = 61 - ((50 * winheight(0) + 40) \/ 81)$/;"	v
s:l	SRCS/process.vim	/^let s:l = 84 - ((69 * winheight(0) + 40) \/ 81)$/;"	v
s:so_save	SRCS/VIM/char.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:so_save	SRCS/VIM/flags.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:so_save	SRCS/VIM/int.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:so_save	SRCS/process.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	SRCS/VIM/char.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:sx	SRCS/VIM/flags.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:sx	SRCS/VIM/int.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:sx	SRCS/process.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	SRCS/VIM/char.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:wipebuf	SRCS/VIM/flags.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:wipebuf	SRCS/VIM/int.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:wipebuf	SRCS/process.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s_all_01	panda/test_printf_classic/conv_s/a13_all_01.c	/^int		s_all_01(void)$/;"	f
s_all_02	panda/test_printf_classic/conv_s/a14_all_02.c	/^int		s_all_02(void)$/;"	f
s_all_03	panda/test_printf_classic/conv_s/a15_all_03.c	/^int		s_all_03(void)$/;"	f
s_basic_01	panda/test_printf_classic/conv_s/a01_basic_01.c	/^int		s_basic_01(void)$/;"	f
s_basic_02	panda/test_printf_classic/conv_s/a02_basic_02.c	/^int		s_basic_02(void)$/;"	f
s_basic_03	panda/test_printf_classic/conv_s/a03_basic_03.c	/^int		s_basic_03(void)$/;"	f
s_data	panda/test_printf_classic/framework/includes/libunit.h	/^typedef struct	s_data$/;"	s
s_flags	SRCS/ft_printf.h	/^typedef struct	s_flags$/;"	s
s_list	../libft/libft.h	/^typedef struct	s_list$/;"	s
s_list	libft/libft.h	/^typedef struct	s_list$/;"	s
s_padding_01	panda/test_printf_classic/conv_s/a09_padding_01.c	/^int		s_padding_01(void)$/;"	f
s_padding_02	panda/test_printf_classic/conv_s/a10_padding_02.c	/^int		s_padding_02(void)$/;"	f
s_padding_03	panda/test_printf_classic/conv_s/a11_padding_03.c	/^int		s_padding_03(void)$/;"	f
s_padding_04	panda/test_printf_classic/conv_s/a12_padding_04.c	/^int		s_padding_04(void)$/;"	f
s_precision_01	panda/test_printf_classic/conv_s/a04_precision_01.c	/^int		s_precision_01(void)$/;"	f
s_precision_02	panda/test_printf_classic/conv_s/a05_precision_02.c	/^int		s_precision_02(void)$/;"	f
s_precision_03	panda/test_printf_classic/conv_s/a06_precision_03.c	/^int		s_precision_03(void)$/;"	f
s_precision_04	panda/test_printf_classic/conv_s/a07_precision_04.c	/^int		s_precision_04(void)$/;"	f
s_precision_05	panda/test_printf_classic/conv_s/a08_precision_05.c	/^int		s_precision_05(void)$/;"	f
s_score	panda/test_printf_classic/framework/includes/libunit.h	/^typedef struct		s_score$/;"	s
s_test	panda/test_printf_classic/framework/includes/libunit.h	/^typedef struct		s_test$/;"	s
sigret	panda/test_printf_classic/framework/includes/libunit.h	/^	int				sigret;$/;"	m	struct:s_test
success	panda/test_printf_classic/framework/includes/libunit.h	/^	int				success;$/;"	m	struct:s_score
success	panda/test_printf_classic/framework/includes/libunit.h	/^	int				success;$/;"	m	struct:s_test
t_data	panda/test_printf_classic/framework/includes/libunit.h	/^}				t_data;$/;"	t	typeref:struct:s_data
t_flags	SRCS/ft_printf.h	/^}				t_flags;$/;"	t	typeref:struct:s_flags
t_list	../libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_score	panda/test_printf_classic/framework/includes/libunit.h	/^}					t_score;$/;"	t	typeref:struct:s_score
t_test	panda/test_printf_classic/framework/includes/libunit.h	/^}					t_test;$/;"	t	typeref:struct:s_test
tabs_equal	panda/test_gnl/main.c	/^int		tabs_equal(int truc, int *tabs, size_t size)$/;"	f
tabs_equal	panda/test_gnl/main_bonus.c	/^int		tabs_equal(int truc, int *tabs, size_t size)$/;"	f
test_fd	panda/test_gnl/test.c	/^	test_fd(char **buffer, char const *filename, int fd)$/;"	f
test_fd	panda/test_gnl/test_bonus.c	/^	test_fd(char **buffer, char const *filename, int fd)$/;"	f
total	panda/test_printf_classic/framework/includes/libunit.h	/^	int				total;$/;"	m	struct:s_score
u_all_01	panda/test_printf_classic/conv_u/a21_all_01.c	/^int		u_all_01(void)$/;"	f
u_all_02	panda/test_printf_classic/conv_u/a22_all_02.c	/^int		u_all_02(void)$/;"	f
u_all_03	panda/test_printf_classic/conv_u/a23_all_03.c	/^int		u_all_03(void)$/;"	f
u_all_04	panda/test_printf_classic/conv_u/a24_all_04.c	/^int		u_all_04(void)$/;"	f
u_basic_01	panda/test_printf_classic/conv_u/a01_basic_01.c	/^int		u_basic_01(void)$/;"	f
u_basic_02	panda/test_printf_classic/conv_u/a02_basic_02.c	/^int		u_basic_02(void)$/;"	f
u_basic_03	panda/test_printf_classic/conv_u/a03_basic_03.c	/^int		u_basic_03(void)$/;"	f
u_padding_01	panda/test_printf_classic/conv_u/a15_padding_01.c	/^int		u_padding_01(void)$/;"	f
u_padding_02	panda/test_printf_classic/conv_u/a16_padding_02.c	/^int		u_padding_02(void)$/;"	f
u_padding_03	panda/test_printf_classic/conv_u/a17_padding_03.c	/^int		u_padding_03(void)$/;"	f
u_padding_04	panda/test_printf_classic/conv_u/a18_padding_04.c	/^int		u_padding_04(void)$/;"	f
u_padding_05	panda/test_printf_classic/conv_u/a19_padding_05.c	/^int		u_padding_05(void)$/;"	f
u_padding_06	panda/test_printf_classic/conv_u/a20_padding_06.c	/^int		u_padding_06(void)$/;"	f
u_precision_01	panda/test_printf_classic/conv_u/a11_precision_01.c	/^int		u_precision_01(void)$/;"	f
u_precision_02	panda/test_printf_classic/conv_u/a12_precision_02.c	/^int		u_precision_02(void)$/;"	f
u_precision_03	panda/test_printf_classic/conv_u/a13_precision_03.c	/^int		u_precision_03(void)$/;"	f
u_precision_04	panda/test_printf_classic/conv_u/a14_precision_04.c	/^int		u_precision_04(void)$/;"	f
u_precision_05	panda/test_printf_classic/conv_u/a25_precision_05.c	/^int		u_precision_05(void)$/;"	f
width	SRCS/ft_printf.h	/^	int		width;$/;"	m	struct:s_flags
x_all_01	panda/test_printf_classic/conv_x_bigx/a22_all_01.c	/^int		x_all_01(void)$/;"	f
x_basic_01	panda/test_printf_classic/conv_x_bigx/a01_basic_01.c	/^int		x_basic_01(void)$/;"	f
x_basic_02	panda/test_printf_classic/conv_x_bigx/a02_basic_02.c	/^int		x_basic_02(void)$/;"	f
x_basic_03	panda/test_printf_classic/conv_x_bigx/a03_basic_03.c	/^int		x_basic_03(void)$/;"	f
x_basic_04	panda/test_printf_classic/conv_x_bigx/a04_basic_04.c	/^int		x_basic_04(void)$/;"	f
x_basic_05	panda/test_printf_classic/conv_x_bigx/a05_basic_05.c	/^int		x_basic_05(void)$/;"	f
x_padding_01	panda/test_printf_classic/conv_x_bigx/a15_padding_01.c	/^int		x_padding_01(void)$/;"	f
x_padding_02	panda/test_printf_classic/conv_x_bigx/a16_padding_02.c	/^int		x_padding_02(void)$/;"	f
x_padding_03	panda/test_printf_classic/conv_x_bigx/a17_padding_03.c	/^int		x_padding_03(void)$/;"	f
x_padding_04	panda/test_printf_classic/conv_x_bigx/a18_padding_04.c	/^int		x_padding_04(void)$/;"	f
x_padding_05	panda/test_printf_classic/conv_x_bigx/a19_padding_05.c	/^int		x_padding_05(void)$/;"	f
x_padding_06	panda/test_printf_classic/conv_x_bigx/a20_padding_06.c	/^int		x_padding_06(void)$/;"	f
x_padding_07	panda/test_printf_classic/conv_x_bigx/a21_padding_07.c	/^int		x_padding_07(void)$/;"	f
x_precision_01	panda/test_printf_classic/conv_x_bigx/a09_precision_01.c	/^int		x_precision_01(void)$/;"	f
x_precision_02	panda/test_printf_classic/conv_x_bigx/a10_precision_02.c	/^int		x_precision_02(void)$/;"	f
x_precision_03	panda/test_printf_classic/conv_x_bigx/a11_precision_03.c	/^int		x_precision_03(void)$/;"	f
x_precision_04	panda/test_printf_classic/conv_x_bigx/a12_precision_04.c	/^int		x_precision_04(void)$/;"	f
x_precision_05	panda/test_printf_classic/conv_x_bigx/a13_precision_05.c	/^int		x_precision_05(void)$/;"	f
x_precision_06	panda/test_printf_classic/conv_x_bigx/a14_precision_06.c	/^int		x_precision_06(void)$/;"	f
x_precision_07	panda/test_printf_classic/conv_x_bigx/a35_precision_07.c	/^int		x_precision_07(void)$/;"	f
x_precision_08	panda/test_printf_classic/conv_x_bigx/a36_precision_08.c	/^int		x_precision_08(void)$/;"	f
zo	SRCS/process.vim	/^normal! zo$/;"	m
zt	SRCS/VIM/char.vim	/^normal! zt$/;"	m
zt	SRCS/VIM/flags.vim	/^normal! zt$/;"	m
zt	SRCS/VIM/int.vim	/^normal! zt$/;"	m
zt	SRCS/process.vim	/^normal! zt$/;"	m
